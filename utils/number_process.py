from math import ceil, log2
from  random import randint
from keyboards.user_markup.inline_markup import start_inline_markup
from loader import dp, bot, db
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from states.states import Num
import logging
import logging.config

logging.config.fileConfig('logging/logging.conf',
                        disable_existing_loggers=False)
logger = logging.getLogger(__name__)

# from aiogram.utils.exceptions import MessageCantBeEdited
# except MessageCantBeEdited as e:

dic = {1:"ü•á", 2: "ü•à", 3: "ü•â", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£", 6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£", 9: "9Ô∏è‚É£", 10: "üîü"}

async def process_start_button(message: types.Message,  state: FSMContext):
    user_id = message.from_user.id
    db.update_start_game_count(user_id)  #—Å—á–µ—Ç—á–∏–∫
    async with state.proxy() as data:
        # max_num –ø–æ–ª—É—á–∞–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –∏ –∑–∞–Ω–æ—Å–∏–º –≤ —Å–ª–æ–≤–∞—Ä—å 'data' (FSM - –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π)
        data['max_num'] = db.get_max_num(user_id)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ 'data' –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫ max_num
        data['user_attempt'] = 0
        data['random_num'] = randint(1, data['max_num'])
        data['attempt'] = ceil(log2(data['max_num']))
    # –º–æ–¥—É–ª—å math –≤—ã—á–∏—Å–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫-—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —á–∏—Å–ª–∞
    await Num.st_number.set()
    logger.info(f'start:{data}')
    text = f"„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n "\
            f"<b>–ü–æ—ó—Ö–∞–ª–∏! –í–≥–∞–π–¥–∞–π —á–∏—Å–ª–æ –≤—ñ–¥ 1Ô∏è‚É£ –¥–æ {data['max_num']}</b>\n "\
            f"‚ö†Ô∏è–í —Ç–µ–±–µ —î {data['attempt']} —Å–ø—Ä–æ–±"
    await bot.send_message(message.from_user.id, text, reply_markup=types.ReplyKeyboardRemove())
    # await logger.debug(f"Random num for {data['name']} is {data['random_num']}")

async def process_start_query(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    db.update_start_game_count(user_id)  #—Å—á–µ—Ç—á–∏–∫
    async with state.proxy() as data:
        # max_num –ø–æ–ª—É—á–∞–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –∏ –∑–∞–Ω–æ—Å–∏–º –≤ —Å–ª–æ–≤–∞—Ä—å 'data' (FSM - –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π)
        data['max_num'] = db.get_max_num(user_id)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ 'data' –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫ max_num
        data['user_attempt'] = 0
        data['random_num'] = randint(1, data['max_num'])
        data['attempt'] = ceil(log2(data['max_num']))
    # –º–æ–¥—É–ª—å math –≤—ã—á–∏—Å–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫-—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —á–∏—Å–ª–∞–∞
    await Num.st_number.set()
    logger.info(f'start:{data}')
    # await query.message.edit_text()
    await query.answer(f"–í —Ç–µ–±–µ —î {data['attempt']} —Å–ø—Ä–æ–±", show_alert=True)
    text = f"„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n "\
            f"<b>–ü–æ—ó—Ö–∞–ª–∏! –í–≥–∞–π–¥–∞–π —á–∏—Å–ª–æ –≤—ñ–¥ 1Ô∏è‚É£ –¥–æ {data['max_num']}</b>"
    await bot.send_message(query.from_user.id, text, reply_markup=types.ReplyKeyboardRemove())
    # await logger.debug(f"Random num for {data['user_name']} is {data['random_num']}")

async def is_valid(message: types.Message, state: FSMContext):
    async with state.proxy() as data: 
        if message.text.isdigit() and int(message.text) in range(1, data['max_num'] + 1):
            await process_num(message, state)
        else:
            await message.reply('üí©üí©üí©')
            await bot.send_message(message.from_user.id, f"–ß–∏—Å–ª–æ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ {data['max_num']}. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
            return

async def process_num(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.id
        data['number'] = int(message.text)
        data['user_attempt'] += 1
    if data['number'] != data['random_num']:
        await message.reply(f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {data['attempt'] - data['user_attempt']}")
    if data['user_attempt'] == data['attempt'] and data['number'] != data['random_num']:
        # —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
        db.reset_values(user_id)
        db.update_game_over_count(user_id)
        db.update_last_over_date(user_id)
        await state.finish()

        await bot.send_message(user_id, '–°–ø—Ä–æ–±–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—èüò©  –¢–∏ –ø—Ä–æ–≥—Ä–∞–≤ üí©üòπ')
        question = f'–°–ø—Ä–æ–±—É—î—à –ø—ñ–¥–∫–æ—Ä–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —â–µ —Ä–∞–∑?'
        await bot.send_message(user_id, text=question, reply_markup=start_inline_markup())
    else:
        if data['number'] < data['random_num']:
            return await bot.send_message(user_id, '–ó–∞–º–∞–ª–æ. –°–ø—Ä–æ–±—É–π —â–æ—Å—å –ø–æ–±—ñ–ª—å—à–µ')
        elif data['number'] > data['random_num']:
            return await bot.send_message(user_id, '–ó–∞–±–∞–≥–∞—Ç–æ. –°–ø—Ä–æ–±—É–π —â–æ—Å—å –ø–æ–º–µ–Ω—à–µ')
        else:
            # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
            db.update_max_num(user_id)
            db.update_win_count(user_id)
            db.update_win_count_for_stat(user_id)
            db.update_last_win_date(user_id)
            # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ë–î
            win_count = db.get_win_count(user_id)
            max_num = db.get_max_num(user_id)
            max_num_for_stat = db.get_max_num_for_stat(user_id)
            # –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —é–∑–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ 'max_num' –±–æ–ª—å—à–µ 'max_num_for_stat' –∫–æ—Ç–æ—Ä–æ–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
            db.update_max_num_for_stat(user_id, max_num) if max_num > max_num_for_stat else None
            logger.info(f'finish:{data}')

            try:
                await message.reply(f"–ü–µ—Ä–µ–º–æ–≥–∞üéØ\n –ó {dic[data['user_attempt']]} - —ó —Å–ø—Ä–æ–±–∏  üëè")
            except KeyError:
                await message.reply(f"–ü–µ—Ä–µ–º–æ–≥–∞üéØ\n –ó {data['user_attempt']}-—ó —Å–ø—Ä–æ–±–∏  üëè")
            await bot.send_message(user_id, f"–†—ñ–≤–µ–Ω—å ‚Ññ{win_count} –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ {int(max_num / 2)} –ø—ñ–¥–∫–æ—Ä–µ–Ω–æ!\n "
                                            "–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å‚ùì‚ùî‚ùì", reply_markup=start_inline_markup()) 
            await state.reset_state(with_data=False)         
            await state.update_data(user_attempt=0)
            #–≤–æ–ø—Ä–æ—Å –∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "reply_markup=gen_markup()" 


def register_handlers_num_process(dp: Dispatcher):
    dp.register_message_handler(is_valid, state=Num.st_number)
from math import ceil, log2
from  random import randint
from keyboards.inline_markup import start_inline_markup
from loader import dp, bot
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

dic = {1:"ü•á", 2: "ü•à", 3: "ü•â", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£", 6: "6Ô∏è‚É£", 7: "–æ—Å—Ç–∞–Ω–Ω—å–æ—óüòì"}

# States
class reg(StatesGroup):
    # st_name = State()
    # st_max_num = State()
    # st_random_num = State() 
    st_number = State() 
    # st_attempt = State()
    # st_user_attempt = State()
    # st_win = State()


async def process_start_button(message: types.Message,  state: FSMContext):
    # query = message
    async with state.proxy() as user_data:
        user_data.setdefault('max_num', 10)
    user_data = await state.get_data()   
    await state.update_data(random_num=randint(1, user_data['max_num']))
    await state.update_data(attempt=ceil(log2(user_data['max_num'])))
    # –º–æ–¥—É–ª—å math –≤—ã—á–∏—Å–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫-—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —á–∏—Å–ª–∞
    await reg.st_number.set()
    user_data = await state.get_data() # –ø–æ–ª—É—á–∞–µ–º —Å–æ —Å–ª–æ–≤–∞—Ä—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    print(user_data)
    await bot.send_message(message.from_user.id, f"–ü–æ—ó—Ö–∞–ª–∏! –í–≥–∞–π–¥–∞–π —á–∏—Å–ª–æ –≤—ñ–¥ 1Ô∏è‚É£ –¥–æ {user_data['max_num']}", reply_markup=types.ReplyKeyboardRemove())
    await bot.send_message(message.from_user.id, f"–í —Ç–µ–±–µ —î {user_data['attempt']} —Å–ø—Ä–æ–±")
    # await print(f"Random num for {user_data['name']} is {user_data['random_num']}")


async def process_start(query: types.CallbackQuery, state: FSMContext):
    # query = message
    async with state.proxy() as user_data:
        user_data.setdefault('max_num', 10)
    user_data = await state.get_data()   
    await state.update_data(random_num=randint(1, user_data['max_num']))
    await state.update_data(attempt=ceil(log2(user_data['max_num'])))
    # –º–æ–¥—É–ª—å math –≤—ã—á–∏—Å–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫-—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —á–∏—Å–ª–∞
    await reg.st_number.set()
    user_data = await state.get_data() # –ø–æ–ª—É—á–∞–µ–º —Å–æ —Å–ª–æ–≤–∞—Ä—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    print(user_data)
    # await query.message.edit_text()
    await query.answer(f"–í —Ç–µ–±–µ —î {user_data['attempt']} —Å–ø—Ä–æ–±", show_alert=True)
    await query.message.delete()
    await bot.send_message(query.from_user.id, f"–ü–æ—ó—Ö–∞–ª–∏! –í–≥–∞–π–¥–∞–π —á–∏—Å–ª–æ –≤—ñ–¥ 1Ô∏è‚É£ –¥–æ {user_data['max_num']}", reply_markup=types.ReplyKeyboardRemove())
    # await print(f"Random num for {user_data['user_name']} is {user_data['random_num']}")


async def is_valid(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if message.text.isdigit() and int(message.text) in range(1, user_data['max_num'] + 1):
        await guess(message, state)
    else:
        await message.reply('üí©üí©üí©')
        return await bot.send_message(message.from_user.id, "–ß–∏—Å–ª–æ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ " + str(user_data['max_num']) + ". –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")


async def guess(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await state.update_data(number=int(message.text))
    user_data.setdefault('user_attempt', 0)
    await state.update_data(user_attempt=user_data["user_attempt"] + 1)
    user_data = await state.get_data()
    if user_data['number'] != user_data['random_num']:
        await message.reply(f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {user_data['attempt'] - user_data['user_attempt']}")
    if user_data['user_attempt'] == user_data['attempt'] and user_data['number'] != user_data['random_num']:
        await state.finish()
        await bot.send_message(message.from_user.id, '–°–ø—Ä–æ–±–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—èüò©  –¢–∏ –ø—Ä–æ–≥—Ä–∞–≤ üí©üòπ')
        question = f'–°–ø—Ä–æ–±—É—î—à –ø—ñ–¥–∫–æ—Ä–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —â–µ —Ä–∞–∑?'
        await bot.send_message(message.from_user.id, text=question, reply_markup=start_inline_markup())
    else:
        if user_data['number'] < user_data['random_num']:
            return await bot.send_message(message.from_user.id, '–ó–∞–º–∞–ª–æ. –°–ø—Ä–æ–±—É–π —â–æ—Å—å –ø–æ–±—ñ–ª—å—à–µ')
        elif user_data['number'] > user_data['random_num']:
            return await bot.send_message(message.from_user.id, '–ó–∞–±–∞–≥–∞—Ç–æ. –°–ø—Ä–æ–±—É–π —â–æ—Å—å –ø–æ–º–µ–Ω—à–µ')
        else:
            user_data = await state.get_data()
            await message.reply(f'–í —è–±–ª—É—á–∫–æ üéØ    –í—ñ—Ç–∞—é‚ùóÔ∏è')
            try:
                await bot.send_message(message.from_user.id, f"–ó {dic[user_data['user_attempt']]} - —ó —Å–ø—Ä–æ–±–∏  üëè")
            except KeyError:
                await bot.send_message(message.from_user.id, f"–ó {user_data['user_attempt']}-—ó —Å–ø—Ä–æ–±–∏  üëè")
            user_data.setdefault('win', 0)
            await state.update_data(max_num=user_data['max_num'] * 2)
            await state.update_data(win=user_data['win'] + 1)
            await state.update_data(user_attempt=0)
            user_data = await state.get_data()
            await bot.send_message(message.from_user.id, f"–†—ñ–≤–µ–Ω—å ‚Ññ{user_data['win']} –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ {int(user_data['max_num'] / 2)} –ø—ñ–¥–∫–æ—Ä–µ–Ω–æ!")
            await state.reset_state(with_data=False)
            '''
            BotDB.add_record(user_name, max_num, win)
            users[user_data["user_name"]] = user_data['win']
            '''
            # print(f"Raiting {users}")
            question = f'–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å?'
            await bot.send_message(message.from_user.id, text=question, reply_markup=start_inline_markup()) 
            #–≤–æ–ø—Ä–æ—Å –∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "reply_markup=gen_markup()" 


def register_handlers_num_process(dp: Dispatcher):
    dp.register_message_handler(is_valid, state=reg.st_number)
from states.states import Bug
from loader import bot, dp, db
from keyboards.user_markup.keyboard_markup import start_menu_markup
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from keyboards.admin_markup.inline_markup import admin_bug_inline_markup
from config import ADMINS_ID as ad_id


async def get_bug_message(message: types.Message):
    await bot.send_message(message.from_user.id, f'–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É —á–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤ –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Å–ª–æ–≤–∞—Ö —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤ —Ü—å–æ–º—É –±–æ—Ç—É –∑–∞—Ä–∞–∑', reply_markup=start_menu_markup())
    await Bug.get_bug.set()


async def process_bug_message(message: types.Message, state: FSMContext):
    global user_id_bag_message
    if len(message.text) > 160:
        await bot.send_message(message.from_user.id, f'''–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - {len(message.text)}.
        –ú–∞–∫—Å–∏–º—É–º 160 —Å–∏–º–≤–æ–ª–æ–≤''')
        return
    else:
        user_id_bag_message = message.from_user.id
        if message.chat.first_name:
            name = message.chat.first_name
        else:
            name = message.chat.username
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É —é–∑–µ—Ä–∞ –≤ –±–∞–∑—É
        db.set_bug_message(message)
        # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —é–∑–µ—Ä–∞ (tg://user?id={user_id}) –∏ –∫–Ω–æ–ø–∫–æ–π –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–∑—ã
        await bot.send_message(ad_id['Pasha'], f'–ù–æ–≤–æ–µ bug_—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ‚ñ∂Ô∏è<a href="tg://user?id={user_id_bag_message}">{name}</a>‚óÄÔ∏è\n '
                                                '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=admin_bug_inline_markup())
        await bot.send_message(message.from_user.id, f'üì©–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!', reply_markup=start_menu_markup())
        await state.reset_state(with_data=False)


def register_handlers_user_bug(dp: Dispatcher):
    dp.register_message_handler(get_bug_message, commands="bug", state="*")
    dp.register_message_handler(process_bug_message, content_types=["text"], state=Bug.get_bug)
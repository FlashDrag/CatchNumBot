from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from utils.number_process import process_start_button
from keyboards.user_markup.keyboard_markup import *
from keyboards.user_markup.inline_markup import *
from loader import bot, db
from aiogram.dispatcher.filters.builtin import Command

import logging
import logging.config

logging.config.fileConfig('logging/logging.conf',
                          disable_existing_loggers=False)
log = logging.getLogger(__name__)


async def process_main_menu(message: types.Message, state: FSMContext):
    await state.reset_state(with_data=False)
    await bot.send_message(message.from_user.id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_start_menu_markup())


@db.usage_counter
async def process_welcome(message: types.Message, command: Command.CommandObj, state: FSMContext):
    # print(f"{command.args=}")
    # –í command.args –±—É–¥–µ—Ç —Ç–æ, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start
    await state.reset_state(with_data=False)
    async with state.proxy() as data:
        data["name"] = message.from_user.first_name
        data["username"] = message.from_user.username
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º first_name –∏ username —é–∑–µ—Ä–∞ –≤ FSM
    db.add_user(message)
    user_id = message.from_user.id
    log.info(f'User {data["name"]} starting game!')
    # db.update_welcome_count(user_id)  #—Å—á–µ—Ç—á–∏–∫
    # –î–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É
    if data["name"]:
        name = data["name"]
    elif data["username"]:
        name = data["username"]
    else:
        name = "–¥—Ä—É–∂–µ"
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω–µ—Ç - —Ç–æ –ø–æ username
    await message.answer(f'–ü—Ä–∏–≤—ñ—Ç {name} üëãüèª  –¶–µ —ñ–≥—Ä–∞ "–í–≥–∞–¥–∞–π–∫–∞ü§î"\n '
                         '‚ÅâÔ∏è–î–æ–ø–æ–º–æ–≥–∞ –≤ –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥–∞ ‚û°Ô∏è /help', reply_markup=main_menu_markup())
    question = f'üèπ----------–†–æ–∑–ø–æ—á–Ω–µ–º–æ‚ùì----------üéØ'
    await message.answer(question, reply_markup=start_inline_markup())


async def process_start_command(state: FSMContext):
    await state.reset_state(with_data=False)
    await process_start_button()


@db.usage_counter
async def process_cancel_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # db.update_cancel_count(user_id)  # —Å—á–µ—Ç—á–∏–∫
    # Allow user to cancel any action
    # current_state = await state.get_state()
    # if current_state is None:
    #     await message.reply('current state is None')
    #     return
    # logging.info("Cancelling state %r", current_state)
    await state.reset_state(with_data=False)
    text = f"„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n "\
        f"<b>–õ–∞–¥–∏, –Ω–∞–¥—É–º–∞—î—à –∑—ñ–≥—Ä–∞—Ç–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ –°–¢–ê–†–¢ ‚¨áÔ∏è‚è∫</b> "
    await message.reply(text, reply_markup=main_start_menu_markup())


@db.usage_counter
async def process_help_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # db.update_help_count(user_id)  #—Å—á–µ—Ç—á–∏–∫
    await bot.send_message(message.from_user.id, f"–ó –¥–æ–ø–æ–º–æ—é —Ü—å–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ñ–º—É —Ç–∏ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –ø—Ä–æ–≥—Ä–∞—î—à ü§Ø\n "
                                                 "üëâüèª–¶–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π —Ç—Ä—é–∫, —è–∫–∏–π –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è\n–±—ñ–Ω–∞—Ä–Ω–∏–π –ø–æ—à—É–∫ —á–∏—Å–ª–∞\n "
                                                 "–î–æ—Å—ñ –≤–∞–∂–∫–æ‚ùì‚ùì\n",
                                                 reply_markup=help_inline_markup())
    await state.reset_state(with_data=False)


@db.usage_counter
async def process_info_command(message: types.Message):
    user_id = message.from_user.id
    # db.update_info_count(user_id)  #—Å—á–µ—Ç—á–∏–∫
    await message.answer(f"<pre> "
                         "üî∏–¶–µ 2-–≥–∞ –±–µ—Ç–∞ –≤–µ—Ä—Å—ñ—è —ñ–≥—Ä–∏ –∑ —Ä—ñ–≤–Ω—è–º–∏.\n "
                         "üî∏–ó –∫–æ–∂–Ω–∏–º –≤–∏–≥—Ä–∞—à–æ–º, —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â—É—î—Ç—å—Å—è —Ç–∞ –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü–∏—Ñ—Ä\n "
                         "üî∏–¶—é –≥—Ä—É –º–æ–∂–ª–∏–≤–æ  –≤Ã∑–∏Ã∑–≥Ã∑—ÄÃ∑–∞Ã∑—ÇÃ∑–∏Ã∑  ‚úîÔ∏è–≤–∏–≥—Ä–∞–≤–∞—Ç–∏ –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫-—Å—Ç—å —Å–ø—Ä–æ–±.\n "
                         "üî∏–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± —î —Ä—ñ–∑–Ω–æ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è\n "
                         "</pre>"
                         "üü¢–ü–æ–º—ñ—Ç–∏–ª–∏ –±–∞–≥–∏? –Ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó? –∫–æ–º–∞–Ω–¥–∞‚û°Ô∏è /bug ", reply_markup=start_menu_markup())


@db.usage_counter
async def process_reset_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # db.update_reset_count(user_id)  # —Å—á–µ—Ç—á–∏–∫
    async with state.proxy() as data:
        log.debug(f"RESETING data: {data}")
    await state.finish()
    db.reset_values(user_id)
    await message.reply('–°–∫–∏–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!', reply_markup=start_menu_markup())


@db.usage_counter
async def process_progress_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # db.update_progress_count(user_id)  # —Å—á–µ—Ç—á–∏–∫
    win_count = db.get_win_count(user_id)
    max_num = db.get_max_num(user_id)
    if win_count + 1 == 1:
        await bot.send_message(message.from_user.id, f"–†—ñ–≤–µ–Ω—å –±–∞–∫–ª–∞–∂–∞–Ω ü§®", reply_markup=start_menu_markup())
    else:
        await bot.send_message(message.from_user.id, f"üßÆ–ü—ñ–¥–∫–æ—Ä–µ–Ω–æ –¥—ñ–∞–ø–∞–∑–æ–Ω {int(max_num / 2)}üîª")
        await bot.send_message(message.from_user.id, f"üìà–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å ‚Ññ{win_count + 1} –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ {max_num}üî∫",
                                                     reply_markup=start_menu_markup())
    await state.reset_state(with_data=False)


@db.usage_counter
async def process_rating(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # db.update_rating_count(user_id)  # —Å—á–µ—Ç—á–∏–∫
# async with state.proxy() as data:
#     data[‚Äú111‚Äù] = message.text
    await bot.send_message(message.from_user.id, f'<pre>{db.get_rating(message)}</pre>',
                                                 reply_markup=start_menu_markup())
    await state.reset_state(with_data=False)


async def process_sos(message: types.Message):
    from config import ADMINS_ID as ad_id
    # async with state.proxy() as data:
    #     name = data["name"]
    user_id = message.from_user.id
    if message.chat.first_name:
        name = message.chat.first_name
    else:
        name = message.chat.username
    # —Å—Å—ã–ª–∫–∞ –Ω–∞ —é–∑–µ—Ä–∞ tg://user?id={user_id}
    await bot.send_message(ad_id[0], f'SOS –æ—Ç: <a href="tg://user?id={user_id}">{name}</a>')
    await message.reply(f'–ê–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–∂–µ—Ç. –°–ø–∞—Å–∏–±–æ!', reply_markup=start_menu_markup())


def register_handlers_user_main(dp: Dispatcher):
    dp.register_message_handler(process_main_menu, text="‚óÄÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", state="*")
    dp.register_message_handler(process_start_button, Text(equals=["üü†–°—Ç–∞—Ä—Ç", "–°–¢–ê–†–¢"], ignore_case=True), state="*")
    dp.register_message_handler(process_welcome, Command(commands=["start"]), state='*')
    dp.register_message_handler(process_cancel_command, commands="cancel", state="*")
    dp.register_message_handler(process_cancel_command, Text(equals=['cancel', 'stop', '—Å—Ç–æ–ø', "‚ùå–í—ñ–¥–º—ñ–Ω–∞"],
                                                             ignore_case=True), state="*")
    dp.register_message_handler(process_help_command, text="‚ùì–î–æ–ø–æ–º–æ–≥–∞", state="*")
    dp.register_message_handler(process_help_command, commands="help", state="*")
    dp.register_message_handler(process_info_command, commands="info", state="*")
    dp.register_message_handler(process_info_command, text="‚ÑπÔ∏ènfo", state="*")
    dp.register_message_handler(process_reset_command, commands=["reset"], state=None)
    dp.register_message_handler(process_reset_command, text="üóë–†–µ—Å–µ—Ç", state=None)
    dp.register_message_handler(process_progress_command, commands=["progress"], state=None)
    dp.register_message_handler(process_progress_command, text="üèÖ–ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å", state=None)
    dp.register_message_handler(process_rating, text="üèÜ–†–µ–π—Ç–∏–Ω–≥", state="*")
    dp.register_message_handler(process_sos, text="‚ñ∂Ô∏èüÜò‚óÄÔ∏è", state=None)

from keyboards.keyboard_markup import sos_menu_markup
from loader import dp, bot
from utils.number_process import process_start
from aiogram.types import CallbackQuery
from aiogram.dispatcher import FSMContext
from keyboards.keyboard_markup import sos_menu_markup, main_start_menu_markup

@dp.callback_query_handler(text='niz') 
async def help_inline_markup_callback_handler(query: CallbackQuery, state: FSMContext):
    answer_data = query.data
    if answer_data == 'niz':
        await query.answer("–ü–æ—è—Å–Ω—é—é:\n–ö–æ–∂–µ–Ω —Ä–∞–∑ –¥—ñ–ª–∏–º–æ –Ω–∞ 2 –¥—ñ–∞–ø–∞–∑–æ–Ω, —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è", show_alert=True)
     # always answer callback queries, even if you have nothing to say
        await query.message.delete()
        await bot.send_message(query.from_user.id, "–î–æ–π—à–ª–æ? –ö—Ä—É—Ç–æ! –ù–∞–∂–º–∏ —Å—Ç–∞—Ä—Ç, —â–æ–± –ø–æ—á–∞—Ç–∏")
        await bot.send_message(query.from_user.id, "–î–æ—Å—ñ —É –≤–∞—É–∫—É–º—ñ? SOS -  –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º. –ù–µ —Å–æ—Ä–æ–º—Å—è)", reply_markup=sos_menu_markup())
        await state.reset_state(with_data=False)



# Use multiple registrators. Handler will execute when one of the filters is OK
@dp.callback_query_handler(text='no')  # if cb.user_data == 'no'
@dp.callback_query_handler(text='yes')  # if cb.user_data == 'yes'
async def inline_kb_answer_callback_handler(query: CallbackQuery, state: FSMContext):
    answer_data = query.data
     # always answer callback queries, even if you have nothing to say
    if answer_data == 'yes':
        await process_start(query, state)
    elif answer_data == "no":
        await bot.send_message(query.from_user.id, '–õ–∞–¥–∏, –∫–æ–ª–∏ –Ω–∞–¥—É–º–∞—î—à –∑—ñ—Ä–≥–∞—Ç–∏ –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ –°–¢–ê–†–¢ ‚¨áÔ∏è‚è∫', reply_markup=main_start_menu_markup())
        await query.answer(f"–ü–æ–∫–∞—Å–∏–∫–∏ üòú", show_alert=True)
        await query.message.delete()
        await state.reset_state(with_data=False)
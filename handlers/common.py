from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from utils.number_process import process_start_button
from keyboards.keyboard_markup import *
from keyboards.inline_markup import *
from loader import bot
import logging
# from operator import itemgetter 
from loader import dp

from data_base.ps_db import BotDB


async def process_main_menu(message: types.Message):
    await bot.send_message(message.from_user.id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_start_menu_markup())


async def process_welcome(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    # if (not BotDB.user_exists(user_id)):
    BotDB.add_user(user_id, first_name, last_name, username)
    rec = BotDB.get_user_name(user_id)
    # print(rec)
    # await state.update_data(user_name=message.from_user.first_name)
    # user_data = await state.get_data()
    '''
    if user_data["user_name"] not in users:
        users[user_data["user_name"]] = 0
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–≤–ª –Ω–∞ –Ω–æ–ª—å –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç—É –≤ —Å–ø–∏—Å–∫–µ
    '''
    await message.answer(f'–ü—Ä–∏–≤—ñ—Ç {rec} üëãüèª  –¶–µ —ñ–≥—Ä–∞ "–í–≥–∞–¥–∞–π–∫–∞"')
    await message.answer('–í–≥–∞–π–¥–∞–π-–∫–∞ —á–∏—Å–ª–æ, —è–∫–µ —è –∑–∞–≥–∞–¥–∞–≤-–∫–∞ü§î')
    await message.answer('–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–∞ –≤ –º–µ–Ω—é - –î–æ–ø–æ–º–æ–≥–∞ –∞–±–æ –≤–≤–µ–¥–∏ /help', reply_markup=main_menu_markup())
    question = f'üèπ----------–†–æ–∑–ø–æ—á–Ω–µ–º–æ‚ÅâÔ∏è----------üéØ'
    await message.answer(question, reply_markup=start_inline_markup())
    


async def process_start_command():
    await process_start_button()


@dp.message_handler(commands="cancel", state="*")
async def process_cancel_command(message: types.Message, state: FSMContext):
    # Allow user to cancel any action
    # current_state = await state.get_state()
    # if current_state is None:
    #     await message.reply('current state is None')
    #     return
    # logging.info("Cancelling state %r", current_state)
    await state.reset_state(with_data=False)
    await message.reply('–õ–∞–¥–∏, –∫–æ–ª–∏ –Ω–∞–¥—É–º–∞—î—à –∑—ñ—Ä–≥–∞—Ç–∏ –≤–≤–µ–¥–∏ –°–¢–ê–†–¢', reply_markup=main_start_menu_markup())


async def process_help_command(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, "–í–∞–∂–∫–æ? –Ø –ø—Ä–∏–±–µ—Ä—ñ–≥ –¥–ª—è —Ç–µ–±–µ üîΩ–ø—ñ–¥–∫–∞–∑–∫—ÉüîΩ", reply_markup=help_menu_markup())
    await state.reset_state(with_data=False)


async def process_info_command(message: types.Message):
    await message.answer("–¶–µ 2-–≥–∞ –±–µ—Ç–∞ –≤–µ—Ä—Å—ñ—è —ñ–≥—Ä–∏ –∑ —Ä—ñ–≤–Ω—è–º–∏. –ó –∫–æ–∂–Ω–∏–º –≤–∏–≥—Ä–∞—à–æ–º, —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â—É—î—Ç—å—Å—è —Ç–∞ –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü–∏—Ñ—Ä")
    await message.answer('–¶—é —ñ–≥—Ä—É –º–æ–∂–ª–∏–≤–æ  –≤Ã∑–∏Ã∑–≥Ã∑—ÄÃ∑–∞Ã∑—ÇÃ∑–∏Ã∑  ‚úîÔ∏è–≤–∏–≥—Ä–∞–≤–∞—Ç–∏ –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫-—Å—Ç—å —Å–ø—Ä–æ–±.\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± —î —Ä—ñ–∑–Ω–æ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è')
    await message.answer('–ü–æ–º—ñ—Ç–∏–≤ –±–∞–≥–∏? —Ä–æ–±–∏ —Å–∫—Ä—ñ–Ω —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π –≤ –ø—Ä–∏–≤–∞—Ç(—Ç—ñ–ª—å–∫–∏ –Ω–µ –±–æ—Ç—ÉüòÖ) –∞ –º–µ–Ω—ñ: @pavmys', reply_markup=start_menu_markup())


async def process_reset_command(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        logging.info("RESETING data %r", data)
        await state.finish()
        await message.reply('–°–∫–∏–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!', reply_markup=start_menu_markup())


async def process_pidkaska_command(message: types.Message, state: FSMContext):
    # await query.answer("–ü—ñ–¥–∫–∞–∑–∫–∞ üßê", show_alert=True)
    await message.reply('–ó –¥–æ–ø–æ–º–æ—é —Ü—å–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ñ–º—É —Ç–∏ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –ø—Ä–æ–≥—Ä–∞—î—à ü§Ø')
    await bot.send_message(message.from_user.id, 'üëâüèª–¶–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π —Ç—Ä—é–∫, —è–∫–∏–π –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è\n–±—ñ–Ω–∞—Ä–Ω–∏–π –ø–æ—à—É–∫ —á–∏—Å–ª–∞',\
         reply_markup=help_inline_markup())
    await state.reset_state(with_data=False)
    # start_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    # start_markup.row("–°—Ç–∞—Ä—Ç")
    # await bot.send_message(message.from_user.id, '–õ–µ—Ç—Å–≥–æ—É—à–∫–∏?', reply_markup=start_markup, reply_markup=help_inline_markup())
        # –ø—ñ–¥–∫–∞–∑–∫–∞: –∫–æ–∂–µ–Ω —Ä–∞–∑ –¥—ñ–ª–∏–º–æ –Ω–∞ 2 –¥—ñ–∞–ø–∞–∑–æ–Ω, —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è


async def process_progress_command(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    try:
        await bot.send_message(message.from_user.id, f"–ü—ñ–¥–∫–æ—Ä–µ–Ω–æ —Ä—ñ–≤–µ–Ω—å ‚Ññ{user_data['win']} –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ {int(user_data['max_num'] / 2)}")
        await bot.send_message(message.from_user.id, f"–ù–∞—Å—Ç–ø—É–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ {int(user_data['max_num'])}", reply_markup=start_menu_markup())
    except KeyError:
        await bot.send_message(message.from_user.id, f"–†—ñ–≤–µ–Ω—å –±–∞–∫–ª–∞–∂–∞–Ω ü§®", reply_markup=start_menu_markup())
    await state.reset_state(with_data=False)


# async def process_rating(message: types.Message, state: FSMContext):
#     for key, value in sorted(users.items(), key = itemgetter(1), reverse = True):
#         await message.answer(f'{key} - {value}-–π —Ä—ñ–≤–µ–Ω—å')


def register_handlers_common(dp: Dispatcher):
    dp.register_message_handler(process_main_menu, text="‚óÄÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", state=None)
    dp.register_message_handler(process_start_button, Text(equals=["üü†–°—Ç–∞—Ä—Ç", "–°–¢–ê–†–¢"], ignore_case=True), state=None)
    dp.register_message_handler(process_welcome, commands="start", state=None)
    dp.register_message_handler(process_cancel_command, commands="cancel", state="*")
    dp.register_message_handler(process_cancel_command, Text(equals=['cancel', 'stop', '—Å—Ç–æ–ø', "‚ùå–í—ñ–¥–º—ñ–Ω–∞"], ignore_case=True), state="*")
    dp.register_message_handler(process_help_command, text="‚ùì–î–æ–ø–æ–º–æ–≥–∞", state="*")
    dp.register_message_handler(process_help_command, commands="help", state="*")
    dp.register_message_handler(process_info_command, commands="info", state="*")
    dp.register_message_handler(process_info_command, text="‚ÑπÔ∏ènfo", state="*")
    dp.register_message_handler(process_reset_command, commands=["reset"], state=None)
    dp.register_message_handler(process_reset_command, text="üóë–†–µ—Å–µ—Ç", state=None)
    dp.register_message_handler(process_pidkaska_command, text="üí¨–ü—ñ–¥–∫–∞–∑–∫–∞", state="*")
    dp.register_message_handler(process_progress_command, commands=["progress"], state=None)
    dp.register_message_handler(process_progress_command, text="üèÖ–ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å", state=None)
    # dp.register_message_handler(process_rating, text="üèÜ–†–µ–π—Ç–∏–Ω–≥", state="*")